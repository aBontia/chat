!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.BlocChat=t(require("react")):e.BlocChat=t(e.React)}(this,function(e){return function(e){function t(i){if(n[i])return n[i].exports;var a=n[i]={exports:{},id:i,loaded:!1};return e[i].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";e.exports={BlocChat:n(1)}},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=i(a),r=n(3),o=i(r),u=n(4),f=i(u),d=s["default"].createClass({displayName:"BlocChat",messagesRef:firebase.database().ref("messages"),usersRef:firebase.database().ref("users"),mixins:[o["default"]],getInitialState:function(){return{messages:[],user:null}},componentWillMount:function(){var e=this;firebase.auth().onAuthStateChanged(function(t){t&&e.setState({user:t})}),this.bindAsArray(this.messagesRef,"messages")},render:function(){var e=this,t=this.state,n=t.messages,i=t.user;return i?s["default"].createElement("div",null,n.length?n.map(function(e,t){return s["default"].createElement("div",{key:t},s["default"].createElement("b",null,e.user.displayName),s["default"].createElement("span",null,e.text))}):"Loading messagesâ€¦",s["default"].createElement("form",{onSubmit:function(e){return e.preventDefault()}},s["default"].createElement("input",{ref:"text"}),s["default"].createElement("button",{onClick:function(){return e.messagesRef.push({text:e.refs.text.value,user:{displayName:i.displayName,photoURL:i.photoURL,uid:i.uid}})}},"Send"))):s["default"].createElement(f["default"],null)}});t["default"]=d,e.exports=t["default"]},function(t,n){t.exports=e},function(e,t,n){var i,a;/*!
	 * ReactFire is an open-source JavaScript library that allows you to add a
	 * realtime data source to your React apps by providing an easy way to let
	 * Firebase populate the state of React components.
	 *
	 * ReactFire 1.0.0
	 * https://github.com/firebase/reactfire/
	 * License: MIT
	 */
!function(n,s){"use strict";i=[],a=function(){return n.ReactFireMixin=s()}.apply(t,i),!(void 0!==a&&(e.exports=a))}(this,function(){"use strict";function e(e){var t;return t="function"==typeof e.key?e.key():"string"==typeof e.key||null===e.key?e.key:e.name()}function t(e){var t;return t="function"==typeof e.ref?e.ref():e.ref}function n(e,t){for(var n=0,i=e.length;n<i;++n)if(e[n][".key"]===t)return n;return-1}function i(e){throw new Error("ReactFire: "+e)}function a(e){var t;"string"!=typeof e?t="Bind variable must be a string. Got: "+e:0===e.length?t='Bind variable must be a non-empty string. Got: ""':e.length>768?t="Bind variable is too long to be stored in Firebase. Got: "+e:/[\[\].#$\/\u0000-\u001F\u007F]/.test(e)&&(t="Bind variable cannot contain any of the following characters: . # $ ] [ /. Got: "+e),"undefined"!=typeof t&&i(t)}function s(e,t){var n={};return"object"==typeof t&&null!==t?n=t:n[".value"]=t,n[".key"]=e,n}function r(t,n){var i=e(n),a=n.val();this.data[t]=s(i,a),this.setState(this.data)}function o(t,i,a){var r,o=e(i),u=i.val(),f=this.data[t];if(null===a)r=0;else{var d=n(f,a);r=d+1}f.splice(r,0,s(o,u)),this.setState(this.data)}function u(t,i){var a=this.data[t],s=n(a,e(i));a.splice(s,1),this.setState(this.data)}function f(t,i){var a=e(i),r=i.val(),o=this.data[t],u=n(o,a);o[u]=s(a,r),this.setState(this.data)}function d(t,i,a){var s,r=e(i),o=this.data[t],u=n(o,r),f=o.splice(u,1)[0];if(null===a)s=0;else{var d=n(o,a);s=d+1}o.splice(s,0,f),this.setState(this.data)}function l(e,n,s,l){"[object Object]"!==Object.prototype.toString.call(e)&&i("Invalid Firebase reference"),a(n),"undefined"!=typeof this.firebaseRefs[n]&&i("this.state."+n+" is already bound to a Firebase reference"),this.firebaseRefs[n]=t(e),l?(this.data[n]=[],this.setState(this.data),this.firebaseListeners[n]={child_added:e.on("child_added",o.bind(this,n),s),child_removed:e.on("child_removed",u.bind(this,n),s),child_changed:e.on("child_changed",f.bind(this,n),s),child_moved:e.on("child_moved",d.bind(this,n),s)}):this.firebaseListeners[n]={value:e.on("value",r.bind(this,n),s)}}var c={componentWillMount:function(){this.data={},this.firebaseRefs={},this.firebaseListeners={}},componentWillUnmount:function(){for(var e in this.firebaseRefs)this.firebaseRefs.hasOwnProperty(e)&&this.unbind(e)},bindAsArray:function(e,t,n){var i=l.bind(this);i(e,t,n,!0)},bindAsObject:function(e,t,n){var i=l.bind(this);i(e,t,n,!1)},unbind:function(e,t){a(e),"undefined"==typeof this.firebaseRefs[e]&&i("this.state."+e+" is not bound to a Firebase reference");for(var n in this.firebaseListeners[e])if(this.firebaseListeners[e].hasOwnProperty(n)){var s=this.firebaseListeners[e][n];this.firebaseRefs[e].off(n,s)}delete this.firebaseRefs[e],delete this.firebaseListeners[e];var r={};r[e]=void 0,this.setState(r,t)}};return c})},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),s=i(a),r=s["default"].createClass({displayName:"SignIn",signIn:function(){var e=new firebase.auth.GithubAuthProvider;firebase.auth().signInWithPopup(e).then(function(e){var t=e.user;firebase.database().ref("users/"+t.uid).set({displayName:t.displayName,email:t.email,githubId:t.providerData[0].uid,photoURL:t.photoURL,refreshToken:t.refreshToken,token:e.credential.accessToken})})["catch"](function(e){return console.error(e)})},render:function(){return s["default"].createElement("button",{onClick:this.signIn},"Sign in with GitHub")}});t["default"]=r,e.exports=t["default"]}])});
//# sourceMappingURL=bloc-chat.min.js.map